---
# tasks file for ansible-role-binaries
- name: Ensure dependencies are installed
  become: true
  pacman:
    update_cache: true
    name: "{{ item }}"
    state: present
  loop:
    - unzip
    - tar
    - python-pip
    - gcc
  when: ansible_os_family == "Archlinux"

- name: Ensure tmp directory is present
  file:
    path: "{{ temp_dir }}"
    state: directory

- name: Ensure local_bin_dir is present
  file:
    path: "{{ local_bin_dir }}"
    state: directory

- name: Install pip packages
  pip:
    name: "{{ packages.pip }}"
    extra_args: --user
    state: present
    executable: pip3

- name: Terraform download package
  get_url:
    url: "{{ terraform_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Terraform extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Terraform move executable
  command: mv terraform "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Docker download package
  get_url:
    url: "{{ docker_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Docker extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Docker move executable
  command: mv "{{ extract.files[0] }}/docker" "{{ local_bin_dir }}docker"
  args:
    chdir: "{{ temp_dir }}"

- name: Docker-compose download package
  get_url:
    url: "{{ docker_compose_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Docker-compose move executable
  command: mv "{{ download.dest }}" "{{ local_bin_dir }}docker-compose"
  args:
    chdir: "{{ temp_dir }}"

- name: Download aws-iam-authenticator
  get_url:
    url: "{{ aws_iam_auth_url }}"
    dest: "{{ local_bin_dir }}/aws-iam-authenticator"
  register: download

- name: Awless download package
  get_url:
    url: "{{ awless_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Awless extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Awless move executable
  command: mv awless "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Kind download package
  get_url:
    url: "{{ kind_url }}"
    dest: "{{ local_bin_dir }}/kind"

- name: Kops download package
  get_url:
    url: "{{ kops_url }}"
    dest: "{{ local_bin_dir }}/kops"

- name: Kubectl download package
  get_url:
    url: "{{ kubectl_url }}"
    dest: "{{ local_bin_dir }}/kubectl"

- name: Argocd CLI download package
  get_url:
    url: "{{ argocdcli_url }}"
    dest: "{{ local_bin_dir }}/argocd"

- name: Istioctl download package
  get_url:
    url: "{{ istioctl_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Istioctl extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Istioctl move executable
  command: mv istioctl "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Helm download package
  get_url:
    url: "{{ helm_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Helm extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Helm move executable
  command: mv "{{ extract.files[0] }}/helm" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: K9s download package
  get_url:
    url: "{{ k9s_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: K9s extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: K9s move executable
  command: mv k9s "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Lazygit download package
  get_url:
    url: "{{ lazygit_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Lazygit extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Lazygit move executable
  command: mv lazygit "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: GithubCli download package
  get_url:
    url: "{{ githubcli_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: GithubCli extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"

- name: GithubCli move executable
  command: mv "gh_{{ githubcli_version }}_linux_amd64/bin/gh" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Stern download package
  get_url:
    url: "{{ stern_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Stern move executable
  command: mv "{{ download.dest }}" "{{ local_bin_dir }}stern"
  args:
    chdir: "{{ temp_dir }}"

- name: Popeye download package
  get_url:
    url: "{{ popeye_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Popeye extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"

- name: Popeye move executable
  command: mv popeye "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Doctl download package
  get_url:
    url: "{{ doctl_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Doctl extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Doctl move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}doctl"
  args:
    chdir: "{{ temp_dir }}"

- name: Bat download package
  get_url:
    url: "{{ bat_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Bat extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Bat move executable
  command: mv "bat-v{{ bat_version }}-x86_64-unknown-linux-gnu/bat" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Exa download package
  get_url:
    url: "{{ exa_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Exa extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Exa move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}exa"
  args:
    chdir: "{{ temp_dir }}"

- name: Kustomize download package
  get_url:
    url: "{{ kustomize_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Kustomize extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Kustomize move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}kustomize"
  args:
    chdir: "{{ temp_dir }}"

- name: Ripgrep download package
  get_url:
    url: "{{ exa_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Ripgrep extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Ripgrep move executable
  command: mv "{{ extract.files[0]/rg }}" "{{ local_bin_dir }}rg"
  args:
    chdir: "{{ temp_dir }}"

- name: Fasd download package
  get_url:
    url: "{{ exa_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Fasd extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Fasd move executable
  command: mv "{{ extract.files[0]/fasd }}" "{{ local_bin_dir }}fasd"
  args:
    chdir: "{{ temp_dir }}"

- name: Broot download package
  get_url:
    url: "{{ broot_url }}"
    dest: "{{ local_bin_dir }}/broot"

- name: Fluxctl download package
  get_url:
    url: "{{ fluxctl_url }}"
    dest: "{{ local_bin_dir }}/fluxctl"

- name: Kubeseal download package
  get_url:
    url: "{{ kubeseal_url }}"
    dest: "{{ local_bin_dir }}/kubeseal"

- name: Github-Markdown-TOC download package
  get_url:
    url: "{{ gh_md_toc_url }}"
    dest: "{{ local_bin_dir }}/gh-md-toc"

- name: Direnv download package
  get_url:
    url: "{{ direnv_url }}"
    dest: "{{ local_bin_dir }}/direnv"

- name: Mdbook download package
  get_url:
    url: "{{ mdbook_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Mdbook extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Mdbook move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}mdbook"
  args:
    chdir: "{{ temp_dir }}"

- name: xsv download package
  get_url:
    url: "{{ xsv_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: xsv extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ local_bin_dir }}"

- name: Ensure right permissions
  file:
    path: "{{ local_bin_dir }}"
    state: directory
    recurse: true
    mode: "+x"

- name: Ensure right owner
  file:
    path: "{{ local_bin_dir }}"
    state: directory
    recurse: true
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
  when: user_name is defined and user_group is defined
