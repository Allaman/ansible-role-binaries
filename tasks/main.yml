---
# tasks file for ansible-role-binaries
- name: Ensure {{ tmp_dir }} is present
  file:
    path: "{{ temp_dir }}"
    state: directory

- name: Ensure {{ local_bin_dir }} is present
  file:
    path: "{{ local_bin_dir }}"
    state: directory

- name: Install pip packages
  pip:
    name: "{{ packages.pip }}"
    extra_args: --user
    state: present
    executable: pip3

- name: Kube-linter download package
  get_url:
    url: "{{ kube_linter_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Kube-linter extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: debug
  debug:
    msg: "{{ extract.files }}"

- name: Kube-linter move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Git-quick-stats download package
  get_url:
    url: "{{ git_quick_stats_url }}"
    dest: "{{ local_bin_dir }}"

- name: Highlight-Pointer download package
  get_url:
    url: "{{ highlight_pointer_url }}"
    dest: "{{ local_bin_dir }}/highlight-pointer"

- name: Slack-term download package
  get_url:
    url: "{{ slack_term_url }}"
    dest: "{{ local_bin_dir }}/slack-term"

- name: Dive download package
  get_url:
    url: "{{ dive_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Dive extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Dive move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Gitui download package
  get_url:
    url: "{{ gitui_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Gitui extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Gitui move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Sd download package
  get_url:
    url: "{{ sd_url }}"
    dest: "{{ local_bin_dir }}/sd"

- name: Scc download package
  get_url:
    url: "{{ duf_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Scc extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Scc move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Duf download package
  get_url:
    url: "{{ duf_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Duf extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Duf move executable
  command: mv "{{ extract.files[2] }}" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Clone dragon
  git:
    repo: https://github.com/mwh/dragon.git
    dest: "{{ temp_dir }}/dragon"

- name: Install dragon
  shell: make PREFIX=$HOME/.local/ install
  args:
    chdir: "{{ temp_dir }}/dragon"

- name: Pet download package
  get_url:
    url: "{{ pet_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Pet extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Pet move executable
  command: mv "{{ extract.files[2] }}" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: K6 download package
  get_url:
    url: "{{ k6_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: K6 extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: K6 move executable
  command: mv "{{ extract.files[0] }}/k6" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Tflint download package
  get_url:
    url: "{{ tflint_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Tflint extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ local_bin_dir }}"
    list_files: true
  register: extract

- name: Dog download package
  get_url:
    url: "{{ dog_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Dog extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Dog move executable
  command: mv "{{ extract.files[4] }}" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Glab download package
  get_url:
    url: "{{ glab_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Glab extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: debug
  debug:
    msg: "{{ extract.files }}"

- name: Glab move executable
  command: mv "{{ extract.files[2] }}" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Tfswitch download package
  get_url:
    url: "{{ tfswitch_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Tfswitch extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Tfswitch move executable
  command: mv "{{ extract.files[3] }}" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Clone xbanish
  git:
    repo: https://github.com/jcs/xbanish.git
    dest: "{{ temp_dir }}/xbanish"

- name: Install xbanish
  shell: PREFIX=$HOME/.local/ make install
  args:
    chdir: "{{ temp_dir }}/xbanish"

- name: Bit download package
  get_url:
    url: "{{ bit_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Bit extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Bit move executable
  command: mv "{{ extract.files[2] }}" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Polaris download package
  get_url:
    url: "{{ polaris_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Polaris extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Polaris move executable
  command: mv "{{ extract.files[3] }}" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Kubeval download package
  get_url:
    url: "{{ kubeval_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Kubeval extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Kubeval move executable
  command: mv "{{ extract.files[2] }}" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Helm2 download package
  get_url:
    url: "{{ helm2_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Helm2 extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Helm2 move executable
  command: mv "{{ extract.files[0] }}/helm" "{{ local_bin_dir }}Helm2"
  args:
    chdir: "{{ temp_dir }}"

- name: Helm2 move tiller
  command: mv "{{ extract.files[0] }}/tiller" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Fd download package
  get_url:
    url: "{{ fd_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Fd extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Fd move executable
  command: mv "{{ extract.files[4] }}" "{{ local_bin_dir }}fd"
  args:
    chdir: "{{ temp_dir }}"

- name: Install SDKMAN
  shell: export SDKMAN_DIR="{{ ansible_env.HOME }}/.local/sdkman" && curl -s "https://get.sdkman.io?rcupdate=false" | bash
  args:
    executable: /bin/bash

- name: Kubectx download package
  get_url:
    url: "{{ kubectx_url }}"
    dest: "{{ local_bin_dir }}"

- name: Kubens download package
  get_url:
    url: "{{ kubens_url }}"
    dest: "{{ local_bin_dir }}"

- name: Mgitstatus download package
  get_url:
    url: "{{ mgitstatus_url }}"
    dest: "{{ local_bin_dir }}/mgitstatus"

- name: Yq download package
  get_url:
    url: "{{ yq_url }}"
    dest: "{{ local_bin_dir }}yq"

- name: Jq download package
  get_url:
    url: "{{ jq_url }}"
    dest: "{{ local_bin_dir }}jq"

- name: Delta download package
  get_url:
    url: "{{ delta_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Delta extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Delta move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Prettyping download package
  get_url:
    url: "{{ prettyping_url }}"
    dest: "{{ local_bin_dir }}"

- name: Lf download package
  get_url:
    url: "{{ lf_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Lf extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Lf move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}/lf"
  args:
    chdir: "{{ temp_dir }}"

- name: Nnn download package
  get_url:
    url: "{{ nnn_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Nnn extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Nnn move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}/nnn"
  args:
    chdir: "{{ temp_dir }}"

- name: Entr download package
  get_url:
    url: "{{ entr_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Entr extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Entr build executable
  shell: ./configure && CFLAGS="-static" make test && PREFIX=$HOME/.local/ make install
  args:
    chdir: "{{ temp_dir }}/{{ extract.files[0] }}"

- name: Docker download package
  get_url:
    url: "{{ docker_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Docker extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Docker move executable
  command: mv "{{ extract.files[0] }}/docker" "{{ local_bin_dir }}docker"
  args:
    chdir: "{{ temp_dir }}"

- name: Docker-compose download package
  get_url:
    url: "{{ docker_compose_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Docker-compose move executable
  command: mv "{{ download.dest }}" "{{ local_bin_dir }}docker-compose"
  args:
    chdir: "{{ temp_dir }}"

- name: Download aws-iam-authenticator
  get_url:
    url: "{{ aws_iam_auth_url }}"
    dest: "{{ local_bin_dir }}/aws-iam-authenticator"
  register: download

- name: Awless download package
  get_url:
    url: "{{ awless_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Awless extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Awless move executable
  command: mv awless "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Kind download package
  get_url:
    url: "{{ kind_url }}"
    dest: "{{ local_bin_dir }}/kind"

- name: Kops download package
  get_url:
    url: "{{ kops_url }}"
    dest: "{{ local_bin_dir }}/kops"

- name: Kubectl download package
  get_url:
    url: "{{ kubectl_url }}"
    dest: "{{ local_bin_dir }}/kubectl"

- name: Argocd CLI download package
  get_url:
    url: "{{ argocdcli_url }}"
    dest: "{{ local_bin_dir }}/argocd"

- name: Istioctl download package
  get_url:
    url: "{{ istioctl_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Istioctl extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Istioctl move executable
  command: mv istioctl/bin/istioctl "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Helm download package
  get_url:
    url: "{{ helm_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Helm extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Helm move executable
  command: mv "{{ extract.files[0] }}/helm" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: K9s download package
  get_url:
    url: "{{ k9s_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: K9s extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: K9s move executable
  command: mv k9s "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Lazygit download package
  get_url:
    url: "{{ lazygit_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Lazygit extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Lazygit move executable
  command: mv lazygit "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: GithubCli download package
  get_url:
    url: "{{ githubcli_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: GithubCli extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"

- name: GithubCli move executable
  command: mv "gh_{{ githubcli_version }}_linux_amd64/bin/gh" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Stern download package
  get_url:
    url: "{{ stern_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Stern move executable
  command: mv "{{ download.dest }}" "{{ local_bin_dir }}stern"
  args:
    chdir: "{{ temp_dir }}"

- name: Popeye download package
  get_url:
    url: "{{ popeye_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Popeye extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"

- name: Popeye move executable
  command: mv popeye "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Doctl download package
  get_url:
    url: "{{ doctl_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Doctl extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Doctl move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}doctl"
  args:
    chdir: "{{ temp_dir }}"

- name: Bat download package
  get_url:
    url: "{{ bat_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Bat extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Bat move executable
  command: mv "bat-v{{ bat_version }}-x86_64-unknown-linux-gnu/bat" "{{ local_bin_dir }}"
  args:
    chdir: "{{ temp_dir }}"

- name: Exa download package
  get_url:
    url: "{{ exa_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Exa extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Exa move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}exa"
  args:
    chdir: "{{ temp_dir }}"

- name: Kustomize download package
  get_url:
    url: "{{ kustomize_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Kustomize extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Kustomize move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}kustomize"
  args:
    chdir: "{{ temp_dir }}"

- name: Fasd download package
  get_url:
    url: "{{ fasd_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Fasd extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Fasd move executable
  command: mv "{{ extract.files[0] }}/fasd" "{{ local_bin_dir }}fasd"
  args:
    chdir: "{{ temp_dir }}"

- name: Ripgrep download package
  get_url:
    url: "{{ ripgrep_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Ripgrep extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Ripgrep move executable
  command: mv "{{ extract.files[0] }}/rg" "{{ local_bin_dir }}rg"
  args:
    chdir: "{{ temp_dir }}"

- name: Broot download package
  get_url:
    url: "{{ broot_url }}"
    dest: "{{ local_bin_dir }}/broot"

- name: Fluxctl download package
  get_url:
    url: "{{ fluxctl_url }}"
    dest: "{{ local_bin_dir }}/fluxctl"

- name: Kubeseal download package
  get_url:
    url: "{{ kubeseal_url }}"
    dest: "{{ local_bin_dir }}/kubeseal"

- name: Github-Markdown-TOC download package
  get_url:
    url: "{{ gh_md_toc_url }}"
    dest: "{{ local_bin_dir }}/gh-md-toc"

- name: Direnv download package
  get_url:
    url: "{{ direnv_url }}"
    dest: "{{ local_bin_dir }}/direnv"

- name: Mdbook download package
  get_url:
    url: "{{ mdbook_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: Mdbook extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ temp_dir }}"
    list_files: true
  register: extract

- name: Mdbook move executable
  command: mv "{{ extract.files[0] }}" "{{ local_bin_dir }}mdbook"
  args:
    chdir: "{{ temp_dir }}"

- name: xsv download package
  get_url:
    url: "{{ xsv_url }}"
    dest: "{{ temp_dir }}"
  register: download

- name: xsv extract package
  unarchive:
    remote_src: true
    src: "{{ download.dest }}"
    dest: "{{ local_bin_dir }}"

- name: Ensure right permissions
  file:
    path: "{{ local_bin_dir }}"
    state: directory
    recurse: true
    mode: "+x"

- name: Ensure right owner
  file:
    path: "{{ local_bin_dir }}"
    state: directory
    recurse: true
    owner: "{{ user_name }}"
    group: "{{ user_group }}"
  when: user_name is defined and user_group is defined

- name: Ensure {{ tmp_dir }} is deleted
  file:
    path: "{{ temp_dir }}"
    state: absent
